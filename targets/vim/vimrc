" Prologue {{{
"
set nocompatible

let s:is_unix = has('unix')
let s:is_mac  = has('mac')
let s:is_gui  = has("gui_running")

let mapleader                = ","
let maplocalleader           = "\\"

" }}}
" Plugins {{{

call plug#begin()

Plug 'justinmk/vim-syntax-extra'
Plug 'Raimondi/delimitMate'
Plug 'tomtom/tcomment_vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'sonph/onehalf', {'branch': '5bec08d', 'rtp': 'vim/'}

" Syntastic {{{
Plug 'scrooloose/syntastic'

let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'passive_filetypes' : ['python', 'cpp']}

let g:syntastic_error_symbol                = '✖'
let g:syntastic_warning_symbol              = '⚈'
let g:syntastic_always_populate_loc_list    = 1
let g:syntastic_auto_loc_list               = 1
let g:syntastic_ignore_files                = ['\m\c\.html$']

let g:syntastic_javascript_checkers         = ['eslint']

let g:syntastic_python_checkers             = ['flake8']

let g:syntastic_clang_tidy_config_file      = '.clang-tidy'

nnoremap <leader>ss :SyntasticCheck<cr>

" }}}
" CtrlP {{{
Plug 'ctrlpvim/ctrlp.vim'

let g:ctrlp_max_files                       = 0
" TODO: Move this to the hidden config
let g:ctrlp_custom_ignore                   = '\v[\/](build|rel|brazil|doc|LOCAL|data|raff_output|super-simulated-root|padb_mock_s3)$'

Plug 'tacahiroy/ctrlp-funky'

let g:ctrlp_funky_after_jump                = 'zozz'
let g:ctrlp_funky_matchtype                 = 'path'
let g:ctrlp_funky_syntax_highlight          = 1
nnoremap <c-o> :CtrlPFunky<cr>

" }}}
" NERDTree {{{
Plug 'scrooloose/nerdtree'

"TODO make it depend on current window size?
let NERDTreeWinSize = 35
let NERDTreeMinimalUI = 1

nnoremap <leader>nf :NERDTreeFind<cr>
nnoremap <F2> :NERDTreeToggle<cr>

" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber

" NERDTress File highlighting
function! NERDHLExt(group, pattern, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:group
        \.' ctermbg=' . a:bg    .' ctermfg='. a:fg
        \.'   guibg=' . a:guibg .'   guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match '
        \. a:group .' /\v\c^\s+.*\.('. a:pattern . ')$/'
endfunction

function! NERDHLFile(group, pattern, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:group
        \.' ctermbg='. a:bg    .' ctermfg='. a:fg
        \.'   guibg='. a:guibg .'   guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match '
        \. a:group .' /\v\c^\s+('. a:pattern . ')$/'
endfunction

augroup pl_NERDTree
  autocmd!
  autocmd bufenter * if (winnr("$") == 1
        \ && exists("b:NERDTreeType")
        \ && b:NERDTreeType == "primary") | q | endif

  call NERDHLExt('Text',  'txt',       'Gray',      'none', '#665c54', 'bg')
  call NERDHLExt('Text',  'tmp',       'DarkGray',  'none', '#504945', 'bg')
  call NERDHLExt('Shell', 'sh',        'Red',       'none', '#fb4934', 'bg')
  call NERDHLExt('CPPh',  'h|hpp|hxx', 'LightCyan', 'none', '#83a598', 'bg')
  call NERDHLExt('CPPs',  'c|cpp|cxx', 'DarkCyan',  'none', '#458588', 'bg')
  call NERDHLExt('Py',    'py',        'DarkGreen', 'none', '#689d6a', 'bg')
  call NERDHLExt('Pyc',   'pyc',       'DarkGrey',  'none', '#3a3a3a', 'bg')

  call NERDHLFile('Dot',   '\..*',            'DarkGrey', 'none', '#3a3a3a', 'bg')
  call NERDHLFile('Make',  'Makefile',        'LightRed', 'none', '#fe8019', 'bg')
  call NERDHLFile('CMake', 'CMakeLists\.txt', 'LightRed', 'none', '#fe8019', 'bg')
  call NERDHLFile('Build', '.*Build.txt',     'LightRed', 'none', '#fe8019', 'bg')
  call NERDHLFile('Exec',  '.*\*\ze(\s+.*)?', 'Red',      'none', '#fb4934', 'bg')
augroup END

" }}}
" Tagbar {{{
Plug 'majutsushi/tagbar'

let g:tagbar_show_linenumbers = 2
let g:tagbar_autoshowtag = 1
let g:tagbar_autofocus = 1
let g:tagbar_foldlevel = 0
let g:tagbar_width = 50

nnoremap <F3> :TagbarToggle<cr>

" }}}
" FSwitch {{{
Plug 'derekwyatt/vim-fswitch'

nnoremap <leader>jj :FSHere<cr>
nnoremap <leader>jr :FSSplitRight<cr>

" TODO remove make subfolder non project specific
augroup pl_FSwitch
  autocmd!
  autocmd BufEnter *.cpp,*.cc,*.c,*.m let b:fswitchdst  = 'hpp,h'
  autocmd BufEnter *.cpp,*.cc,*.c,*.m let b:fswitchlocs =
        \ 'reg:|lib|include/clang|,' .
        \ 'reg:|lib|include/llvm|,' .
        \ 'reg:|source|include/lldb|,' .
        \ 'reg:/source/include/,' .
        \ 'reg:/src/include/,' .
        \ 'reg:/lib/include/,' .
        \ 'reg:|src|include/**|'.
        \ ',../include'

  autocmd BufEnter *.hpp,*.hh,*.h   let b:fswitchdst  = 'cpp,cc,c,m'
  autocmd BufEnter *.hpp,*.hh,*.h   let b:fswitchlocs =
        \ 'reg:|include/clang|lib|,' .
        \ 'reg:|include/llvm|lib|,' .
        \ 'reg:|include/lldb|source|,' .
        \ 'reg:/include/lib/,' .
        \ 'reg:/include/source/,' .
        \ 'reg:/include/src/,' .
        \ 'reg:/include.*/src/,' .
        \ '../src'
augroup END

" }}}
" UltiSnips {{{
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

let g:snips_author                          = "Artem Ho-Honcharov"
let g:UltiSnipsSnippetDirectories           = ["UltiSnips"]
let g:UltiSnipsJumpBackwardTrigger          = "<c-m>"
let g:UltiSnipsJumpForwardTrigger           = "<c-l>"

if s:is_gui
  let g:UltiSnipsExpandTrigger              = "<C-Space>"
else
  let g:UltiSnipsExpandTrigger              = "<Nul>"
endif

" }}}
" Git {{{
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'

nnoremap <leader>gs  :Git<cr>
nnoremap <leader>gl  :silent! Glog --reverse \| botright copen \| clast \| redraw!<cr>
nnoremap <leader>ge  :Gedit<cr>
nnoremap <leader>gc  :Git commit<cr>
nnoremap <leader>gq  :Git commit --amend<cr>
nnoremap <leader>gb  :Git blame<cr>
nnoremap <leader>gd  :Gvdiff<cr>
nnoremap <leader>gp  :call setqflist(map(systemlist("git diff --name-only master"), '{"filename": v:val}'))<cr>

nnoremap <leader>dgl :diffget LOCAL  \| diffupdate<cr>
nnoremap <leader>dgb :diffget BASE   \| diffupdate<cr>
nnoremap <leader>dgr :diffget REMOTE \| diffupdate<cr>

nnoremap <leader>ff :write \| call system('git-clang-format HEAD~1 -f -- '. expand('%')) \| edit<cr>

" }}}
" Ack {{{
Plug 'mileszs/ack.vim'

nnoremap <leader>a :Ack!<space>
nnoremap <leader>A :Ack! <C-R><C-W><cr>

if executable('ag')
  let g:ackprg = 'ag -U --vimgrep --ignore ctags'
endif

" }}}
" Airline {{{
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.linenr = ' '
let g:airline_symbols.colnr = ':'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_symbols.readonly = '⭤'

function! AirlineInit()
  let g:airline_section_a = airline#section#create(['mode', ' ', 'iminsert'])
  " let g:airline_section_x = airline#section#create(['filetype'])
endfunction

augroup pl_Airline
  autocmd!
  autocmd User AirlineAfterInit call AirlineInit()
augroup END

let g:airline_detect_iminsert                    = 1
let g:airline_detect_paste                       = 0
let g:airline_powerline_fonts                    = 1

let g:airline#extensions#tabline#enabled         = 1
let g:airline#extensions#tabline#show_splits     = 0
let g:airline#extensions#tabline#tab_nr_type     = 1
let g:airline#extensions#tabline#fnamemod        = ':t'

let g:airline#extensions#whitespace#show_message = 1

let g:airline_theme='distinguished'

" }}}

call plug#end()

filetype plugin indent on

" TODO ditch UltiSnips in favour of just loading files
set rtp+=~/Development/Projects/dotfiles/installers/vim/after
" set rtp+=~/Development/Projects/dotfiles/dependencies/llvm.vim

" }}}
" Settings {{{
" Basic {{{

set shell=/bin/bash

if s:is_gui
  set clipboard              =unnamed
endif

set ambiwidth                =single
set autoread
set autowrite
set backspace                =indent,eol,start
set completeopt              =menu,popup,longest,menuone
set encoding                 =utf-8
set formatoptions            =croqlj
set history                  =1000
set laststatus               =2
set lazyredraw
set noequalalways
set showmode
set splitbelow
set splitright
set ttimeoutlen              =50
set wildmenu

set nopaste
set pastetoggle=<F5>

" }}}
" Sessions {{{

set sessionoptions           =blank,curdir,folds,globals,
                             \options,tabpages,winsize

" }}}
" Buffers {{{

set bufhidden                =unload
set switchbuf                =usetab

" }}}
" Scroll n Search n Substitute {{{

set scrolloff                =0
set sidescroll               =1
set sidescrolloff            =5

set ignorecase
set smartcase
set incsearch
set hlsearch

set matchtime                =5
set showmatch

" }}}
" Special chars {{{

set list
set listchars                =tab:▸\ ,extends:❯,precedes:❮
set fillchars                =diff:⣿,vert:│
set showbreak                =↪

" }}}
" Folding {{{

set foldlevelstart           =99
set foldminlines             =1

" }}}
" Backup {{{2

"set nobackup
"set nowritebackup
"set noswapfile

set undodir                  =~/.vim/tmp/undo/
set backupdir                =~/.vim/tmp/backup/
set directory                =~/.vim/tmp/swap/

" Create Backup Folders {{{3
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
" }}}

" }}}
" Indentation {{{

set softtabstop              =2
set shiftwidth               =2
set tabstop                  =2

set smartindent
set autoindent
set expandtab
set wrap

" }}}
" View {{{

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax                       on
if s:is_gui
  colorscheme                onehalfdark
else
  colorscheme                onehalfdark
  set t_Co                     =256
endif

set numberwidth              =2
set relativenumber
set nonumber

" set colorcolumn            =81
set colorcolumn              =0
set background               =dark
set ruler
set showcmd
set cursorline

if s:is_gui
  set guifont                =Menlo:h15
  set guioptions             =gtm
  set visualbell t_vb        ="
endif

" }}}
" Wildmenu {{{

set wildmenu
set wildmode                 =longest,list,full

" }}}
" }}}
" Mappings {{{

if s:is_gui
  nnoremap <esc>             <esc> \| :nohlsearch<cr>
endif

inoremap jk                  <esc>
cnoremap jk                  <c-c>

inoremap <c-f>u              <esc>gUiwea
inoremap <c-f>l              <esc>guiwea
nnoremap <leader>fu          gUiw
nnoremap <leader>fl          guiw

" nnoremap j                 gj
" nnoremap k                 gk
" nnoremap gj                j
" nnoremap gk                k

nmap J                       5j
nmap K                       5k
xmap J                       5j
xmap K                       5k

" Scroll down by 1 line
nnoremap <space>             <c-e>

" Scroll left/right
nnoremap <c-[>               zh
nnoremap <c-]>               zl

" Redo
nnoremap U                   <c-r>

" Forward/backward repeat of "/" or "?"
nnoremap n                   nzvzz
nnoremap N                   Nzvzz

nnoremap gI                  '.zvzz
nnoremap gp                  <c-o>zvzz
nnoremap gn                  <c-i>zvzz
nnoremap g;                  g;zvzz
nnoremap g,                  g,zvzz
nnoremap ``                  ``zvzz

nnoremap <c-w>q              :copen<cr>zvzz
nnoremap [q                  :cprevious<cr>zvzz
nnoremap ]q                  :cnext<cr>zvzz
nnoremap [Q                  :cfirst<cr>zvzz
nnoremap ]Q                  :clast<cr>zvzz
nnoremap <c-w>l              :lopen<cr>zvzz
nnoremap [l                  :lprevious<cr>zvzz
nnoremap ]l                  :lnext<cr>zvzz
nnoremap [L                  :lfirst<cr>zvzz
nnoremap ]L                  :llast<cr>zvzz

nnoremap /                   /\v\c
nnoremap ?                   ?\v\c

nnoremap <tab>t              :tabnew<cr>
nnoremap <tab>l              :tabnext<cr>
nnoremap <tab>h              :tabprevious<cr>
nnoremap <tab>1              :tabnext1<cr>
nnoremap <tab>2              :tabnext2<cr>
nnoremap <tab>3              :tabnext3<cr>
nnoremap <tab>4              :tabnext4<cr>
nnoremap <tab>5              :tabnext5<cr>
nnoremap <tab>6              :tabnext6<cr>
nnoremap <tab>7              :tabnext7<cr>
nnoremap <tab>8              :tabnext8<cr>
nnoremap <tab>9              :tabnext9<cr>
nnoremap <tab>0              :tabnext10<cr>

nnoremap <tab>d              :bdelete<cr>
nnoremap <tab>c              :tabclose<cr>

nnoremap <tab>j <c-]>zo
nnoremap <tab>J :vsplit<cr><c-]>zo
nnoremap <tab>s :tselect<cr>zo
nnoremap <tab>S :vsplit<cr>:tselect<cr>zo
inoremap <esc>n <c-x><c-]>

" Split windows
nnoremap ge                  :vsplit<cr>
nnoremap go                  :split<cr>

" Scroll window up/down
" nnoremap gn                  <c-f>zz
" nnoremap gp                  <c-b>zz

" Switch windows
nnoremap gh                  <c-w>h
nnoremap gj                  <c-w>j
nnoremap gk                  <c-w>k
nnoremap gl                  <c-w>l

" Move windows
nnoremap gH                  <c-w>H
nnoremap gJ                  <c-w>J
nnoremap gK                  <c-w>K
nnoremap gL                  <c-w>L

" Make windows the same size
nnoremap g=                  <c-w>=

if s:is_mac && s:is_gui
  nnoremap ∆                 <c-w>-
  nnoremap ˚                 <c-w>+
  nnoremap ˙                 <c-w><
  nnoremap ¬                 <c-w>>
elseif s:is_unix
  nnoremap j               <c-w>-
  nnoremap k               <c-w>+
  nnoremap h               <c-w><
  nnoremap l               <c-w>>
else
  nnoremap <m-j>             <c-w>-
  nnoremap <m-k>             <c-w>+
  nnoremap <m-h>             <c-w><
  nnoremap <m-l>             <c-w>>
endif

nnoremap <tab>k              <c-o>zz

if s:is_gui
  nnoremap <Enter>           o<esc>
  nnoremap <S-Enter>         O<esc>
  inoremap <S-Enter>         <esc>O
else
  nnoremap <Enter>           o<esc>
  nnoremap ✠                 O<esc>
  inoremap ✠                 <esc>O
endif

nnoremap <c-n>               J
nnoremap <c-u>               kJ
vnoremap <c-n>               J

if s:is_mac && s:is_gui
  nnoremap <tab>n            :macaction selectNextWindow:<cr>
  nnoremap <tab>p            :macaction selectPreviousWindow:<cr>
endif

nnoremap <leader>w           :write<cr>
nnoremap <leader>W           :wq<cr>

nnoremap <leader>r           :%s/\<<c-r><c-w>\>/<c-r><c-w>/g<left><left>

nnoremap <F4>                :setlocal spell! spelllang=en_us<cr>
inoremap <F4>                <esc>:setlocal spell! spelllang=en_us<cr>a
nnoremap <leader>sn          ]s
nnoremap <leader>sp          [s
nnoremap <leader>sa          zg
nnoremap <leader>su          a<c-x>s

inoremap <c-a>               <esc>I
inoremap <c-e>               <esc>A

cnoremap <c-a>               <home>
cnoremap <c-e>               <end>
cnoremap <c-f>               <right>
cnoremap <c-b>               <left>

nnoremap <leader>cf          :let @*=expand('%:p')<CR>

nnoremap <leader>m           :make<cr>

" Interface with TMUX clipboard
vnoremap <leader>ty y<cr>:call system("tmux load-buffer -", @0)<cr>
nnoremap <leader>tp :let @0 = system("tmux save-buffer -")<cr>"0p<cr>"

" }}}
" Colorscheme Mod {{{

" highlight Normal              guifg=#999999
highlight LineNr                guifg=#454545
" highlight Comment             guifg=#444444
" highlight Delimiter           guifg=#444444
"
" highlight cType               guifg=#90c000
" highlight cppBoolean          guifg=#90c000
" highlight cDelimiter          guifg=#444444
" highlight cOperator           guifg=#888888
" highlight ErrorMsg            guifg=black ctermfg=black
"
" highlight Folded              guifg=#444444 guibg=#252525
" highlight NERDTreeDirSlash    guifg=#444444
"
highlight VertSplit             guifg=#333333 guibg=#282c34
" highlight ColorColumn         guibg=#222222
" highlight CursorLine          guibg=#222222
"
" highlight lCursor gui=Bold guifg=NONE guibg=Cyan
" highlight iCursor gui=Bold guifg=NONE guibg=LightBlue
"
" highlight Normal  ctermbg=NONE
" highlight NonText ctermbg=NONE
" highlight LineNr  ctermbg=NONE

highlight DiffAdd    guifg=#00d782 guibg=#005f52
highlight DiffDelete guifg=#ab417a guibg=#631d3f
highlight DiffChange guifg=#d0d0d0 guibg=#663a4f
highlight DiffText   guifg=#5fffff guibg=#008787

" }}}
" Auto {{{
" Global {{{

augroup au_global
  autocmd!

  " Save when losing focus, TODO: make it work in iTerm
  autocmd FocusLost * :silent! wall

  " Make sure Vim returns to the same line when you reopen a file.
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif

  autocmd InsertEnter * set timeoutlen=200
  autocmd InsertLeave * set timeoutlen=1000

  autocmd InsertEnter * set nocursorline
  autocmd InsertLeave * set cursorline
augroup END

" }}}
" Quickfix {{{

augroup ft_quickfix
  autocmd!
  autocmd FileType qf nnoremap <buffer> <Enter> :.cc<cr>
  autocmd FileType qf nnoremap <buffer> q :q<cr>
augroup END

" }}}
" Markdown {{{

augroup ft_markdown
  autocmd!
  autocmd FileType markdown nnoremap <buffer> <localleader>v :InstantMarkdownPreview<cr>
augroup END

" }}}
" LLVM {{{

set rtp+=~/Development/Projects/llvm/utils/vim

augroup au_llvm
  autocmd!
  autocmd! BufRead,BufNewFile *.ll  set filetype=llvm
  autocmd! BufRead,BufNewFile *.mir set filetype=yaml
  autocmd! BufRead,BufNewFile *.td  set filetype=tablegen
  autocmd! BufRead,BufNewFile LLVMBuild.txt set filetype=cfg
augroup END

" }}}
" Python {{{

augroup ft_python
  autocmd!
  autocmd FileType python
        \ setlocal tabstop=4         |
        \ setlocal shiftwidth=4      |
        \ setlocal softtabstop=4     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=0       |
        \ setlocal foldnestmax=2
augroup END

inoremap <c-n> <c-x><c-n>
inoremap <c-p> <c-x><c-p>

" }}}
" JavaScript {{{

augroup ft_javascript
  autocmd!
  autocmd FileType javascript
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=0       |
        \ setlocal foldnestmax=2
augroup END

" }}}
" JSON {{{

augroup ft_json
  autocmd!
  autocmd FileType json
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=2       |
        \ setlocal foldnestmax=10
augroup END

" }}}
" HTML {{{

augroup filetype_html
  autocmd!

  " select current tag block and fold
  autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END

autocmd FileType html
      \ setlocal tabstop=2         |
      \ setlocal shiftwidth=2      |
      \ setlocal softtabstop=2     |
      \ setlocal foldmethod=indent |
      \ setlocal foldlevel=2       |
      \ setlocal foldnestmax=10

" }}}
" Vim {{{

augroup ft_vim
  autocmd!

  autocmd FileType vim setlocal keywordprg=:help
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim nmap <buffer> <leader>dd :help <C-r><C-w><cr>

  autocmd FileType help nnoremap <silent><buffer> q :q<cr>
  autocmd FileType help nnoremap <tab>j <c-]>

  autocmd BufWinEnter *.txt if &filetype == 'help' | wincmd L | endif
augroup END

" }}}
" Helium {{{

augroup ft_helium
  autocmd!
  autocmd BufRead,BufNewFile *.he set filetype=helium
augroup END

" }}}
" ActionScript {{{

augroup ft_as3
  autocmd!
  autocmd BufRead,BufNewFile *.as setfiletype as3
augroup END

" }}}
" AppleScript {{{

augroup ft_applescript
  autocmd!
  autocmd BufRead,BufNewFile *.applescript set filetype=applescript
  autocmd FileType applescript iabbrev \\ ¬
augroup END

" }}}
" C {{{

" TODO make todos settings nicier
augroup ft_c
  autocmd!
  autocmd FileType c setlocal foldmethod=indent
  autocmd FileType c syntax match __note  "NOTE.*$"  | highlight __note  guifg=#222222 guibg=#55606d ctermfg=0 ctermbg=29
  autocmd FileType c syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
  autocmd FileType c syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType c syntax match __hmm   "???.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType c syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
  autocmd FileType c syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
  autocmd FileType c syntax cluster cCommentGroup contains=__note,__todo,__test,__hmm,__fixme,__shit
augroup END

inoremap <c-n> <c-x><c-n>
inoremap <c-p> <c-x><c-p>

" }}}
" C++ {{{

augroup ft_cpp
  autocmd!
  autocmd FileType cpp setlocal foldmethod=indent
  autocmd FileType cpp syntax match __note  "NOTE.*$"  | highlight __note  guifg=#222222 guibg=#55606d ctermfg=0 ctermbg=29
  autocmd FileType cpp syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
  autocmd FileType cpp syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType cpp syntax match __hmm   "???.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType cpp syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
  autocmd FileType cpp syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
  autocmd FileType cpp syntax cluster cCommentGroup contains=__note,__todo,__test,__hmm,__fixme,__shit
  autocmd FileType cpp
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldlevel=1       |
        \ setlocal foldnestmax=1
augroup END

inoremap <c-n> <c-x><c-n>
inoremap <c-p> <c-x><c-p>

" }}}
" C# {{{

augroup ft_cs
  autocmd!
  autocmd FileType cs setlocal foldmethod=indent
  autocmd FileType cs syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
  autocmd FileType cs syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType cs syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
  autocmd FileType cs syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
  autocmd FileType cs syntax cluster csCommentHook contains=__todo,__hmm,__fixme,__shit

  autocmd FileType cs
        \ setlocal tabstop=4         |
        \ setlocal shiftwidth=4      |
        \ setlocal softtabstop=4     |
        \ setlocal foldlevel=1       |
        \ setlocal foldnestmax=3
augroup END

" }}}
" Java {{{

augroup ft_java
  autocmd!
  autocmd FileType java
        \ setlocal tabstop=4         |
        \ setlocal shiftwidth=4      |
        \ setlocal softtabstop=4     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=1       |
        \ setlocal foldnestmax=2
augroup END

" }}}
" Log {{{

augroup ft_log
  autocmd!
  autocmd BufNewFile,BufReadPost *.log :set filetype=messages
  autocmd FileType messages
        \ set nowrap |
        \ setlocal foldmethod=marker
augroup END

" }}}
" Crule {{{

augroup ft_crule
  autocmd!
  autocmd BufNewFile,BufReadPost *.crule :set filetype=dylan
  autocmd BufNewFile,BufReadPost *.rule :set filetype=dylan
  autocmd BufNewFile,BufReadPost *.ast :set filetype=dylan
augroup END

" }}}
" }}}
