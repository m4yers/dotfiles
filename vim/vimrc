" Prologue {{{
"
set nocompatible

let s:is_unix = has('unix')
let s:is_mac  = has('mac')
let s:is_gui  = has("gui_running")

" }}}
" Plugins {{{

call plug#begin()

" Completion
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }
Plug 'rdnetto/YCM-Generator'
Plug 'scrooloose/syntastic'

" Syntax
Plug 'justinmk/vim-syntax-extra'
Plug 'suan/vim-instant-markdown'
Plug 'Valloric/Vim-Jinja2-Syntax'
Plug 'wannesm/wmgraphviz.vim'
Plug 'solarnz/thrift.vim'
Plug 'PProvost/vim-ps1'
Plug 'Rykka/riv.vim'

" Panes
Plug 'tacahiroy/ctrlp-funky'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'

" Functionality
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/vim-easy-align'
Plug 'derekwyatt/vim-fswitch'
Plug 'Chiel92/vim-autoformat'
Plug 'kshenoy/vim-signature'
Plug 'Raimondi/delimitMate'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'xolox/vim-session'
Plug 'xolox/vim-misc'
Plug 'fidian/hexmode'

" Snippents
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Integration
Plug 'rizzatti/dash.vim'
Plug 'wakatime/vim-wakatime'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'rking/ag.vim'

" Themes
Plug 'NLKNguyen/papercolor-theme'
Plug 'reedes/vim-colors-pencil'
Plug 'rakr/vim-two-firewatch'
Plug 'morhetz/gruvbox'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

filetype plugin indent on

set rtp+=~/Development/Projects/dotfiles/vim/after
set rtp+=~/Development/Projects/llvm-m68k/llvm/utils/vim

set spellfile=~/Development/Projects/dotfiles/vim/spell/en.latin1.add

" }}}
" Settings {{{
" Basic {{{

if s:is_gui
  set clipboard              =unnamed
endif

set ambiwidth                =single
set autoread
set autowrite
set backspace                =indent,eol,start
set completeopt              =longest,menuone
set encoding                 =utf-8
set formatoptions            =croqlj
set history                  =1000
set laststatus               =2
set lazyredraw
set noequalalways
set noshowmode
set splitbelow
set splitright
set ttimeoutlen              =50
set wildmenu

" }}}
" Sessions {{{

set sessionoptions           =blank,curdir,folds,globals,
                             \options,tabpages,winsize

" }}}
" Buffers {{{

set bufhidden                =unload
set switchbuf                =usetab

" }}}
" Scroll n Search n Substitute {{{

set scrolloff                =0
set sidescroll               =1
set sidescrolloff            =5

set noignorecase
set smartcase
set incsearch
set hlsearch

set matchtime                =5
set showmatch

" }}}
" Special chars {{{

set list
set listchars                =tab:‚ñ∏\ ,extends:‚ùØ,precedes:‚ùÆ
set fillchars                =diff:‚£ø,vert:‚îÇ
set showbreak                =‚Ü™

" }}}
" Folding {{{

set foldlevelstart           =99
set foldminlines             =1

" }}}
" Backup {{{2

"set nobackup
"set nowritebackup
"set noswapfile

set undodir                  =~/.vim/tmp/undo/
set backupdir                =~/.vim/tmp/backup/
set directory                =~/.vim/tmp/swap/

" Create Backup Folders {{{3
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
" }}}

" }}}
" Indentation {{{

set softtabstop              =2
set shiftwidth               =2
set tabstop                  =2

set smartindent
set autoindent
set expandtab
set wrap

" }}}
" View {{{

syntax                       on
if s:is_gui
  colorscheme                PaperColor
else
  colorscheme                PaperColor
  set t_Co                     =256
endif

set numberwidth              =2
set relativenumber
set nonumber

set colorcolumn              =81
set background               =dark
set ruler
set showcmd
set cursorline

if s:is_gui
  set guifont                =Menlo\ for\ Powerline:h12
  set guioptions             =gtm
  set visualbell t_vb        ="
endif

" }}}
" Wildmenu {{{

set wildmenu
set wildmode                 =longest,list,full

" }}}
" }}}
" Mappings {{{

let mapleader                = ","
let maplocalleader           = "\\"

if s:is_gui
  nnoremap <esc>             <esc> \| :nohlsearch<cr>
endif

inoremap jk                  <esc>
cnoremap jk                  <c-c>

inoremap <c-f>u              <esc>gUiwea
inoremap <c-f>l              <esc>guiwea
nnoremap <c-f>u              gUiw
nnoremap <c-f>l              guiw

" nnoremap j                 gj
" nnoremap k                 gk
" nnoremap gj                j
" nnoremap gk                k

nmap J                       5j
nmap K                       5k
xmap J                       5j
xmap K                       5k

nnoremap n                   nzvzz
nnoremap N                   Nzvzz
nnoremap gI                  '.zvzz
nnoremap gp                  <c-o>zvzz
nnoremap gn                  <c-i>zvzz
nnoremap g;                  g;zvzz
nnoremap g,                  g,zvzz
nnoremap ``                  ``zvzz

nnoremap g>>                 i<space><esc>l
nnoremap g<<                 X

nnoremap <c-w>q              :copen<cr>
nnoremap [q                  :cprevious<cr>
nnoremap ]q                  :cnext<cr>
nnoremap [Q                  :cfirst<cr>
nnoremap ]Q                  :clast<cr>
nnoremap <c-w>l              :lopen<cr>
nnoremap [l                  :lprevious<cr>
nnoremap ]l                  :lnext<cr>
nnoremap [L                  :lfirst<cr>
nnoremap ]L                  :llast<cr>

nnoremap /                   /\v\c
nnoremap ?                   ?\v\c

nnoremap <tab>t              :tabnew<cr>
nnoremap <tab>l              :tabnext<cr>
nnoremap <tab>h              :tabprevious<cr>
nnoremap <tab>1              :tabnext1<cr>
nnoremap <tab>2              :tabnext2<cr>
nnoremap <tab>3              :tabnext3<cr>
nnoremap <tab>4              :tabnext4<cr>
nnoremap <tab>5              :tabnext5<cr>
nnoremap <tab>6              :tabnext6<cr>
nnoremap <tab>7              :tabnext7<cr>
nnoremap <tab>8              :tabnext8<cr>
nnoremap <tab>9              :tabnext9<cr>
nnoremap <tab>0              :tabnext10<cr>

nnoremap <tab>e              :vsplit<cr>
nnoremap <tab>o              :split<cr>
nnoremap <tab>d              :bdelete<cr>
nnoremap <tab>c              :tabclose<cr>

nnoremap <c-h>               <c-w>h
nnoremap <c-j>               <c-w>j
nnoremap <c-k>               <c-w>k
nnoremap <c-l>               <c-w>l

if s:is_mac && s:is_gui
  nnoremap ‚àÜ                 <c-w>-
  nnoremap Àö                 <c-w>+
  nnoremap Àô                 <c-w><
  nnoremap ¬¨                 <c-w>>
elseif s:is_unix
  nnoremap j               <c-w>-
  nnoremap k               <c-w>+
  nnoremap h               <c-w><
  nnoremap l               <c-w>>
else
  nnoremap <m-j>             <c-w>-
  nnoremap <m-k>             <c-w>+
  nnoremap <m-h>             <c-w><
  nnoremap <m-l>             <c-w>>
endif

nnoremap <tab>k              <c-o>zz

if s:is_gui
  nnoremap <Enter>           o<esc>
  nnoremap <S-Enter>         O<esc>
else
  nnoremap <Enter>           o<esc>
  nnoremap ‚ú†                 O<esc>
endif

nnoremap <c-n>               J
nnoremap <c-u>               kJ
vnoremap <c-n>               J

if s:is_mac && s:is_gui
  nnoremap <tab>n            :macaction selectNextWindow:<cr>
  nnoremap <tab>p            :macaction selectPreviousWindow:<cr>
endif

nnoremap <leader>w           :write<cr>
nnoremap <leader>W           :wq<cr>

" replace the word under cursor in current buffer
nnoremap <leader>r           :%s/\<<c-r><c-w>\>/<c-r><c-w>/g<left><left>

nnoremap <F4>                :setlocal spell! spelllang=en_us<cr>
inoremap <F4>                <esc>:setlocal spell! spelllang=en_us<cr>a
nnoremap <leader>sn          ]s
nnoremap <leader>sp          [s
nnoremap <leader>sa          zg
nnoremap <leader>su          a<c-x>s

inoremap <c-a>               <esc>I
inoremap <c-e>               <esc>A

cnoremap <c-a>               <home>
cnoremap <c-e>               <end>
cnoremap <c-f>               <right>
cnoremap <c-b>               <left>

" }}}
" Plugins {{{
" JSON {{{
"
let g:vim_json_syntax_conceal = 0

" }}}
" Colorscheme Modification {{{

highlight Normal              guifg=#999999
highlight LineNr              guifg=#333333
highlight Comment             guifg=#444444
highlight Delimiter           guifg=#444444

highlight cType               guifg=#90c000
highlight cppBoolean          guifg=#90c000
highlight cDelimiter          guifg=#444444
highlight cOperator           guifg=#888888

highligh  Folded              guifg=#444444 guibg=#252525
highlight NERDTreeDirSlash    guifg=#444444

highlight VertSplit           ctermbg=0 ctermfg=bg guibg=#111111 guifg=bg
highlight ColorColumn         guibg=#222222
highlight CursorLine          guibg=#222222

" }}}
" Airline {{{

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.linenr = '‚ò∞'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'
let g:airline_symbols.readonly = '‚≠§'

function! AirlineInit()
  let g:airline_section_a = airline#section#create(['mode', ' ', 'iminsert'])
  let g:airline_section_x = airline#section#create(['filetype'])
endfunction

augroup pl_Airline
  autocmd!
  autocmd User AirlineAfterInit call AirlineInit()
augroup END

let g:airline_detect_iminsert                    = 1
let g:airline_detect_paste                       = 0
let g:airline_powerline_fonts                    = 1

let g:airline#extensions#tabline#enabled         = 1
let g:airline#extensions#tabline#show_splits     = 0
let g:airline#extensions#tabline#tab_nr_type     = 1
let g:airline#extensions#tabline#fnamemod        = ':t'

let g:airline#extensions#whitespace#show_message = 1

let g:airline_theme='distinguished'

" }}}
" Syntastic {{{

let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'passive_filetypes' : ['python']}

let g:syntastic_error_symbol                = '‚úñ'
let g:syntastic_warning_symbol              = '‚öà'
let g:syntastic_always_populate_loc_list    = 1
let g:syntastic_auto_loc_list               = 1
let g:syntastic_ignore_files                = ['\m\c\.html$']

let g:syntastic_javascript_checkers         = ['eslint']

let g:syntastic_python_checkers             = ['pylint']
let g:syntastic_python_pylint_args          = '--rcfile=/Users/m4yers/Development/Projects/crutch/.pylintrc'

nnoremap <leader>ss :SyntasticCheck<cr>

" }}}
" Hexmode {{{

nnoremap <leader>he :Hexmode<cr>

" "}}}
" Easy Align {{{

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" }}}
" YouCompleteMe {{{

let g:ycm_error_symbol                               = '‚úñ'
let g:ycm_warning_symbol                             = '‚öà'
let g:ycm_complete_in_comments                       = 1
let g:ycm_goto_buffer_command                        = 'new-or-existing-tab'
let g:ycm_key_invoke_completion                      = ''
let g:ycm_autoclose_preview_window_after_completion  = 1
let g:ycm_autoclose_preview_window_after_insertion   = 1
let g:ycm_add_preview_to_completeopt                 = 1
let g:ycm_disable_for_files_larger_than_kb           = 0

nnoremap <leader>yd :YouCompleter GetDoc<cr>
nnoremap <leader>yt :YcmCompleter GetType<cr>
nnoremap <tab>j :YcmCompleter GoTo<cr>zz

" }}}
" CtrlP {{{

let g:ctrlp_funky_matchtype                 = 'path'
let g:ctrlp_funky_syntax_highlight          = 1
nnoremap <c-o> :CtrlPFunky<cr>

" }}}
" UltiSnips {{{

let g:snips_author                          = "Artyom Goncharov"
let g:UltiSnipsSnippetDirectories           = ["UltiSnips"]
let g:UltiSnipsJumpBackwardTrigger          = "<c-m>"
let g:UltiSnipsJumpForwardTrigger           = "<c-l>"

if s:is_gui
  let g:UltiSnipsExpandTrigger              = "<C-Space>"
else
  let g:UltiSnipsExpandTrigger              = "<Nul>"
endif

" }}}
" TComment {{{

" nnoremap <C-S-j> :TComment<cr>j
" nnoremap <C-S-k> :TComment<cr>k

" }}}
" FSwitch {{{

nnoremap <leader>jj :FSHere<cr>
nnoremap <leader>jr :FSSplitRight<cr>

" TODO remove make subfolder non project specific
augroup pl_FSwitch
  autocmd!
  autocmd BufEnter *.cpp let b:fswitchdst  = 'hpp,h'
  autocmd BufEnter *.cpp let b:fswitchlocs =
        \ 'reg:/src/include/,' .
        \ 'reg:/lib/include/,' .
        \ 'reg:|lib|include/llvm|,' .
        \ 'reg:|src|include/**|'.
        \ ',../include'

  autocmd BufEnter *.cc  let b:fswitchdst  = 'hh,h'
  autocmd BufEnter *.cc  let b:fswitchlocs = b:fswitchlocs

  autocmd BufEnter *.c   let b:fswitchdst  = 'h'
  autocmd BufEnter *.c   let b:fswitchlocs = b:fswitchlocs

  autocmd BufEnter *.m   let b:fswitchdst  = 'h'
  autocmd BufEnter *.m   let b:fswitchlocs = b:fswitchlocs

  autocmd BufEnter *.h   let b:fswitchdst  = 'cpp,cc,c,m'
  autocmd BufEnter *.h   let b:fswitchlocs =
        \ 'reg:/include/src/,' .
        \ 'reg:|include/llvm|lib|,' .
        \ 'reg:/include/lib/,' .
        \ 'reg:/include.*/src/,' .
        \ '../src'
augroup END

" }}}
" Autoformat {{{

let g:formatterpath = ['/usr/local/opt/llvm/bin']

noremap <leader>ff :Autoformat<cr>

" C
let g:formatters_c = ['astyle_c']
let g:formatdef_astyle_c = '"astyle --mode=c --style=google'
      \ .' -pcH".(&expandtab ? "s".shiftwidth() : "t")'

" C++
let g:formatters_cpp = ['clangformat', 'astyle_cpp']
let g:formatdef_clangformat = '"clang-format -style=LLVM"'
let g:formatdef_astyle_cpp = '"astyle --mode=c --style=google'
      \ . ' -pcH".(&expandtab ? "s".shiftwidth() : "t")'

" C#
let g:formatters_cs = ['astyle_cs']
let g:formatdef_astyle_cs = '"astyle'
      \ .' --mode=cs'
      \ .' --style=google'
      \ .' --indent-namespaces'
      \ .' -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" Py
let g:formatdef_autopep8 = '"autopep8 - --max-line-length=80 --indent-size=2"'

" }}}
" NERDTree {{{

"TODO make it depend on current window size?
let NERDTreeWinSize = 50
let NERDTreeMinimalUI = 1

nnoremap <leader>nf :NERDTreeFind<cr>
nnoremap <F2> :NERDTreeToggle<cr>

" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber

" NERDTress File highlighting
function! NERDHLExt(group, pattern, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:group
        \.' ctermbg=' . a:bg    .' ctermfg='. a:fg
        \.'   guibg=' . a:guibg .'   guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match '
        \. a:group .' /\v\c^\s+.*\.('. a:pattern . ')$/'
endfunction

function! NERDHLFile(group, pattern, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:group
        \.' ctermbg='. a:bg    .' ctermfg='. a:fg
        \.'   guibg='. a:guibg .'   guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match '
        \. a:group .' /\v\c^\s+('. a:pattern . ')$/'
endfunction

augroup pl_NERDTree
  autocmd!
  autocmd bufenter * if (winnr("$") == 1
        \ && exists("b:NERDTreeType")
        \ && b:NERDTreeType == "primary") | q | endif

  call NERDHLExt('Text',  'txt',       'Gray',      'none', '#665c54', 'bg')
  call NERDHLExt('Text',  'tmp',       'DarkGray',  'none', '#504945', 'bg')
  call NERDHLExt('Shell', 'sh',        'Red',       'none', '#fb4934', 'bg')
  call NERDHLExt('CPPh',  'h|hpp|hxx', 'LightCyan', 'none', '#83a598', 'bg')
  call NERDHLExt('CPPs',  'c|cpp|cxx', 'DarkCyan',  'none', '#458588', 'bg')
  call NERDHLExt('Py',    'py',        'DarkGreen', 'none', '#689d6a', 'bg')
  call NERDHLExt('Pyc',   'pyc',       'DarkGrey',  'none', '#3a3a3a', 'bg')

  call NERDHLFile('Dot',   '\..*',            'DarkGrey', 'none', '#3a3a3a', 'bg')
  call NERDHLFile('Make',  'Makefile',        'LightRed', 'none', '#fe8019', 'bg')
  call NERDHLFile('CMake', 'CMakeLists\.txt', 'LightRed', 'none', '#fe8019', 'bg')
  call NERDHLFile('Build', '.*Build.txt',     'LightRed', 'none', '#fe8019', 'bg')
  call NERDHLFile('Exec',  '.*\*\ze(\s+.*)?', 'Red',      'none', '#fb4934', 'bg')
augroup END

" }}}
" Tagbar {{{

let g:tagbar_autofocus = 1
let g:tagbar_width = 30

nnoremap <F3> :TagbarToggle<cr>

" }}}
" Dash {{{

" TODO make llvm and clang relative to project that use them
let g:dash_map = { 'cpp' : ['llvm', 'clang', 'cpp'] }

nnoremap <silent> <leader>d :Dash<cr>

" }}}
" Git {{{

nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gl :silent! Glog --reverse \| botright copen \| clast \| redraw!<cr>
nnoremap <leader>ge :Gedit<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gd :Gvdiff<cr>
nnoremap <leader>gp :Gpush<cr>

" }}}
" Editor Config {{{

let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" }}}
" Instant Markdown {{{

let g:instant_markdown_autostart = 0

" }}}
" Sessions {{{

let g:session_default_overwrite = 0
let g:session_autosave_periodic = 10
let g:session_persist_colors    = 0
let g:session_autoload          = 'no'
let g:session_autosave          = 'yes'
let g:session_default_to_last   = 'yes'
let g:session_directory         = '~/tmp/vim/sessions'

" }}}
" Ag {{{

nnoremap <leader>a :Ag!<space>
nnoremap <leader>A :Ag! <C-R><C-W><cr>

" }}}
" }}}
" Auto {{{
" Global {{{

augroup au_global
  autocmd!

  " Save when losing focus, TODO: make it work in iTerm
  autocmd FocusLost * :silent! wall

  " Make sure Vim returns to the same line when you reopen a file.
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif

  autocmd InsertEnter * set timeoutlen=200
  autocmd InsertLeave * set timeoutlen=1000

  autocmd InsertEnter * set nocursorline
  autocmd InsertLeave * set cursorline
augroup END

" }}}
" Quickfix {{{

augroup ft_quickfix
  autocmd!
  autocmd FileType qf nnoremap <buffer> <Enter> :.cc<cr>
  autocmd FileType qf nnoremap <buffer> q :q<cr>
augroup END

" }}}
" Markdown {{{

augroup ft_markdown
  autocmd!
  autocmd FileType markdown nnoremap <buffer> <localleader>v :InstantMarkdownPreview<cr>
augroup END

" }}}
" LLVM {{{

set rtp+=~/Development/Projects/llvm/utils/vim

augroup au_llvm
  autocmd!
  autocmd! BufRead,BufNewFile *.ll  set filetype=llvm
  autocmd! BufRead,BufNewFile *.mir set filetype=yaml
  autocmd! BufRead,BufNewFile *.td  set filetype=tablegen
  autocmd! BufRead,BufNewFile *.rst set filetype=rest
  autocmd! BufRead,BufNewFile LLVMBuild.txt set filetype=cfg
augroup END

" }}}
" Python {{{

augroup ft_python
  autocmd!
  autocmd FileType python
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=0       |
        \ setlocal foldnestmax=2
augroup END

" }}}
" JavaScript {{{

augroup ft_javascript
  autocmd!
  autocmd FileType javascript
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=0       |
        \ setlocal foldnestmax=2
augroup END

" }}}
" JSON {{{

augroup ft_json
  autocmd!
  autocmd FileType json
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=2       |
        \ setlocal foldnestmax=10
augroup END

" }}}
" HTML {{{

augroup filetype_html
  autocmd!

  " select current tag block and fold
  autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END

autocmd FileType html
      \ setlocal tabstop=2         |
      \ setlocal shiftwidth=2      |
      \ setlocal softtabstop=2     |
      \ setlocal foldmethod=indent |
      \ setlocal foldlevel=2       |
      \ setlocal foldnestmax=10

" }}}
" Vim {{{

augroup ft_vim
  autocmd!

  autocmd FileType vim setlocal keywordprg=:help
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim nmap <buffer> <leader>d :help <C-r><C-w><cr>

  autocmd FileType help nnoremap <silent><buffer> q :q<cr>
  autocmd FileType help nnoremap <tab>j <c-]>

  autocmd BufWinEnter *.txt if &filetype == 'help' | wincmd L | endif
augroup END

" }}}
" Helium {{{

augroup ft_helium
  autocmd!
  autocmd BufRead,BufNewFile *.he set filetype=helium
augroup END

" }}}
" ActionScript {{{

augroup ft_as3
  autocmd!
  autocmd BufRead,BufNewFile *.as set filetype=as3
augroup END

" }}}
" C {{{

" TODO make todos settings nicier
augroup ft_c
  autocmd!
  autocmd FileType c setlocal foldmethod=syntax
  autocmd FileType c syntax match __note  "NOTE.*$"  | highlight __note  guifg=#222222 guibg=#55606d ctermfg=bg ctermbg=29
  autocmd FileType c syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
  autocmd FileType c syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType c syntax match __hmm   "???.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType c syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
  autocmd FileType c syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
  autocmd FileType c syntax cluster cCommentGroup contains=__note,__todo,__test,__hmm,__fixme,__shit
augroup END

" }}}
" C++ {{{

augroup ft_cpp
  autocmd!
  autocmd FileType cpp setlocal foldmethod=syntax
  autocmd FileType cpp syntax match __note  "NOTE.*$"  | highlight __note  guifg=#222222 guibg=#55606d ctermfg=bg ctermbg=29
  autocmd FileType cpp syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
  autocmd FileType cpp syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType cpp syntax match __hmm   "???.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType cpp syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
  autocmd FileType cpp syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
  autocmd FileType cpp syntax cluster cCommentGroup contains=__note,__todo,__test,__hmm,__fixme,__shit
  autocmd FileType cpp
        \ setlocal tabstop=2         |
        \ setlocal shiftwidth=2      |
        \ setlocal softtabstop=2     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=0       |
        \ setlocal foldnestmax=1
augroup END

" }}}
" C# {{{

augroup ft_cs
  autocmd!
  autocmd FileType cs setlocal foldmethod=syntax
  autocmd FileType cs syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
  autocmd FileType cs syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
  autocmd FileType cs syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
  autocmd FileType cs syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
  autocmd FileType cs syntax cluster csCommentHook contains=__todo,__hmm,__fixme,__shit

  autocmd FileType cs
        \ setlocal tabstop=4         |
        \ setlocal shiftwidth=4      |
        \ setlocal softtabstop=4     |
        \ setlocal foldmethod=indent |
        \ setlocal foldlevel=1       |
        \ setlocal foldnestmax=3
augroup END

" }}}
" Java {{{

augroup ft_java
  autocmd!
  autocmd FileType java
        \ setlocal tabstop=4         |
        \ setlocal shiftwidth=4      |
        \ setlocal softtabstop=4     |
        \ setlocal foldmethod=syntax |
        \ setlocal foldlevel=1       |
        \ setlocal foldnestmax=2
augroup END

" }}}
" Log {{{

augroup ft_log
  autocmd!
  autocmd BufNewFile,BufReadPost *.log :set filetype=messages
  autocmd FileType messages
        \ set nowrap |
        \ setlocal foldmethod=marker
augroup END

" }}}
" }}}
" Other {{{
" Cursor {{{

highlight lCursor gui=Bold guifg=NONE guibg=Cyan
highlight iCursor gui=Bold guifg=NONE guibg=LightBlue

" }}}
" Keymap {{{

set keymap=russian-jcukenwin

set iminsert=0
set imsearch=0

" }}}
" }}}
