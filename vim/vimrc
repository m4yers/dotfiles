" Prologue {{{

let s:is_unix                = has('unix')
let s:is_mac                 = has('mac')
let s:is_gui                 = has("gui_running")

" }}}
" Plugins {{{

set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Switching between companion files (e.g. .h and .cpp files)
Plugin 'FSwitch'

Plugin 'easymotion/vim-easymotion'

" Place, toggle and display marks.
Plugin 'kshenoy/vim-signature'

Plugin 'junegunn/vim-easy-align'

" Static, Semantic analysys
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'scrooloose/syntastic'

Plugin 'rust-lang/rust.vim'
Plugin 'Xe/lolcode.vim'

" Swift
Plugin 'keith/swift.vim'

" CSharp
Plugin 'OrangeT/vim-csharp'

" JavaScript
Plugin 'othree/yajs.vim'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'elzr/vim-json'
Plugin 'wavded/vim-stylus'

Plugin 'Chiel92/vim-autoformat'
Plugin 'Valloric/Vim-Jinja2-Syntax'
Plugin 'tfnico/vim-gradle'

" Python
Plugin 'python.vim'

" C, Bison, Flex syntax
Plugin 'justinmk/vim-syntax-extra'

Plugin 'octol/vim-cpp-enhanced-highlight'

" Thrift syntax
Plugin 'solarnz/thrift.vim'

" PowerShell syntax
Plugin 'PProvost/vim-ps1'

" Graphwiz Support
Plugin 'wannesm/wmgraphviz.vim'
Plugin 'Raimondi/delimitMate'

" Snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" Git
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'

" Support windows
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'

Plugin 'suan/vim-instant-markdown'
Plugin 'tomtom/tcomment_vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'

" AG search integration
Plugin 'rking/ag.vim'

" Fuzzy file, buffer, mru, tag, ... finder for Vim
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'bling/vim-airline'

" Colors
Plugin 'morhetz/gruvbox'

" Dash integration
Plugin 'rizzatti/dash.vim'

call vundle#end()
filetype plugin indent on

set rtp+=~/Development/Projects/dotfiles/vim/after
set rtp+=~/Development/Projects/vim-camel
set rtp+=~/Development/Projects/Swift/swift/utils/vim

set spellfile=~/Development/Projects/dotfiles/vim/spell/en.latin1.add

" }}}
" Settings {{{
" Basic {{{

set encoding                 =utf-8
set backspace                =indent,eol,start
set completeopt              =longest,menuone
set clipboard                =unnamed
set ambiwidth                =single
set history                  =1000
set ttimeoutlen              =50
set laststatus               =2
set noshowmode
set wildmenu
set lazyredraw
set autowrite
set autoread
set splitbelow
set splitright
set noequalalways

" }}}
" Scroll n Search n Substitute {{{

set scrolloff                =0
set sidescroll               =1
set sidescrolloff            =5

set noignorecase
set smartcase
set incsearch
set hlsearch

set matchtime                =5
set showmatch

" }}}
" Special chars {{{

set list
set listchars                =tab:‚ñ∏\ ,extends:‚ùØ,precedes:‚ùÆ
set fillchars                =diff:‚£ø,vert:‚îÇ
set showbreak                =‚Ü™

" }}}
" Folding {{{

set foldlevelstart           =99
set foldminlines             =1

" }}}
" Backup {{{2

"set nobackup
"set nowritebackup
"set noswapfile

set undodir                  =~/.vim/tmp/undo/
set backupdir                =~/.vim/tmp/backup/
set directory                =~/.vim/tmp/swap/

" Create Backup Folders {{{3
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
" }}}

" }}}
" Indentation {{{

set softtabstop              =4
set shiftwidth               =4
set tabstop                  =4

set smartindent
set autoindent
set expandtab
set wrap

" }}}
" View {{{

syntax                       on
colorscheme                  gruvbox

set numberwidth              =2
set relativenumber
set nonumber

set colorcolumn              =99
set background               =dark
set t_Co                     =256
set ruler
set showcmd
set cursorline

if s:is_gui
    set guifont              =Menlo\ for\ Powerline:h12
    set guioptions           =gtm
    set visualbell t_vb      ="
endif

highlight VertSplit ctermbg=bg ctermfg=0 guibg=bg guifg=#000000

" }}}
" Wildmenu {{{

set wildmenu
set wildmode                 =longest,list,full

" }}}
" }}}
" Mappings {{{

let mapleader               = ","
let maplocalleader          = "\\"

if s:is_gui
    nnoremap <esc>           <esc> \| :nohlsearch<cr>
endif

inoremap jk                  <esc>
cnoremap jk                  <c-c>

inoremap <c-f>u              <esc>gUiwea
inoremap <c-f>l              <esc>guiwea
nnoremap <c-f>u              gUiw
nnoremap <c-f>l              guiw

" nnoremap j                 gj
" nnoremap k                 gk
" nnoremap gj                j
" nnoremap gk                k

nmap J                       5j
nmap K                       5k
xmap J                       5j
xmap K                       5k

nnoremap n                   nzvzz
nnoremap N                   Nzvzz
nnoremap gI                  '.zvzz
nnoremap gp                  <c-o>zvzz
nnoremap gn                  <c-i>zvzz
nnoremap g;                  g;zvzz
nnoremap g,                  g,zvzz

nnoremap [q                  :cprevious<cr>
nnoremap ]q                  :cnext<cr>
nnoremap [Q                  :cfirst<cr>
nnoremap ]Q                  :clast<cr>

nnoremap [l                  :lprevious<cr>
nnoremap ]l                  :lnext<cr>
nnoremap [L                  :lfirst<cr>
nnoremap ]L                  :llast<cr>

nnoremap /                   /\v\c
nnoremap ?                   ?\v\c

nnoremap <tab>t              :tabnew<cr>
nnoremap <tab>l              :tabnext<cr>
nnoremap <tab>h              :tabprevious<cr>
nnoremap <tab>1              :tabnext1<cr>
nnoremap <tab>2              :tabnext2<cr>
nnoremap <tab>3              :tabnext3<cr>
nnoremap <tab>4              :tabnext4<cr>
nnoremap <tab>5              :tabnext5<cr>
nnoremap <tab>6              :tabnext6<cr>
nnoremap <tab>7              :tabnext7<cr>
nnoremap <tab>8              :tabnext8<cr>
nnoremap <tab>9              :tabnext9<cr>
nnoremap <tab>0              :tabnext10<cr>

nnoremap <tab>e              :vsplit<cr>
nnoremap <tab>o              :split<cr>
nnoremap <tab>d              :bdelete<cr>
nnoremap <tab>c              :tabclose<cr>

nnoremap <c-h>               <c-w>h
nnoremap <c-j>               <c-w>j
nnoremap <c-k>               <c-w>k
nnoremap <c-l>               <c-w>l

if s:is_mac && s:is_gui
    nnoremap ‚àÜ               <c-w>-
    nnoremap Àö               <c-w>+
    nnoremap Àô               <c-w><
    nnoremap ¬¨               <c-w>>
elseif s:is_unix
    nnoremap j             <c-w>-
    nnoremap k             <c-w>+
    nnoremap h             <c-w><
    nnoremap l             <c-w>>
else
    nnoremap <m-j>           <c-w>-
    nnoremap <m-k>           <c-w>+
    nnoremap <m-h>           <c-w><
    nnoremap <m-l>           <c-w>>
endif

nnoremap <tab>k              <c-o>zz

if s:is_gui
    nnoremap <Enter>         o<esc>
    nnoremap <S-Enter>       O<esc>
else
    nnoremap <Enter>         o<esc>
    nnoremap ‚ú†               O<esc>
endif

if s:is_mac && s:is_gui
    nnoremap <tab>n          :macaction selectNextWindow:<cr>
    nnoremap <tab>p          :macaction selectPreviousWindow:<cr>
endif

nnoremap <leader>w           :write<cr>
nnoremap <leader>W           :wq<cr>

" replace the word under cursor in current buffer
nnoremap <leader>r           :%s/\<<c-r><c-w>\>/<c-r><c-w>/g<left><left>

nnoremap <F4>                :setlocal spell! spelllang=en_us<cr>
inoremap <F4>                <esc>:setlocal spell! spelllang=en_us<cr>a
nnoremap <leader>sn          ]s
nnoremap <leader>sp          [s
nnoremap <leader>sa          zg
nnoremap <leader>su          a<c-x>s

inoremap <c-a>               <esc>I
inoremap <c-e>               <esc>A

cnoremap <c-a>               <home>
cnoremap <c-e>               <end>
cnoremap <c-f>               <right>
cnoremap <c-b>               <left>

" }}}
" Plugins {{{
" Airline {{{

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'iminsert'])
endfunction

augroup pl_Airline
    autocmd!
    autocmd User AirlineAfterInit call AirlineInit()
augroup END

let g:airline_detect_iminsert                    = 1
let g:airline_detect_paste                       = 0
let g:airline_powerline_fonts                    = 1

let g:airline#extensions#tabline#enabled         = 1
let g:airline#extensions#tabline#show_splits     = 0
let g:airline#extensions#tabline#tab_nr_type     = 1
let g:airline#extensions#tabline#fnamemod        = ':t'

let g:airline#extensions#whitespace#show_message = 1

" }}}
" Syntastic {{{

let g:syntastic_error_symbol                = '‚úñ'
let g:syntastic_warning_symbol              = '‚öà'
let g:syntastic_always_populate_loc_list    = 1
let g:syntastic_auto_loc_list               = 1
let g:syntastic_ignore_files                = ['\m\c\.html$']

let g:syntastic_javascript_checkers         = ['eslint']

let g:syntastic_python_checkers             = ['flake8']
let g:syntastic_python_flake8_args          = '--max-line-length=80 --max-complexity=10 '.
            \ '--ignore=E111,E114,E121,E125,E126,E127,E128,E129,E131,E133,'.
            \ 'E201,E202,E203,E211,E221,E222,E241,E251,E261,E303,E402,W503'

" }}}
" Easy Align {{{

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" }}}
" YouCompleteMe {{{

let g:ycm_error_symbol                               = '‚úñ'
let g:ycm_warning_symbol                             = '‚öà'
let g:ycm_complete_in_comments                       = 1
let g:ycm_goto_buffer_command                        = 'new-or-existing-tab'
let g:ycm_key_invoke_completion                      = ''
let g:ycm_autoclose_preview_window_after_completion  = 1
let g:ycm_filetype_specific_completion_to_disable    = { 'java': 1, 'help': 1 }

nnoremap <leader>yd :YcmDebugInfo<cr>
nnoremap <leader>yt :YcmCompleter GetType<cr>
nnoremap <tab>j :YcmCompleter GoTo<cr>zz

" }}}
" CtrlP {{{

let g:ctrlp_funky_matchtype                 = 'path'
let g:ctrlp_funky_syntax_highlight          = 1
nnoremap <c-o> :CtrlPFunky<cr>

" }}}
" UltiSnips {{{

let g:snips_author                          = "Artyom Goncharov"
let g:UltiSnipsSnippetDirectories           = ["UltiSnips"]
let g:UltiSnipsJumpBackwardTrigger          = "<c-m>"
let g:UltiSnipsJumpForwardTrigger           = "<c-l>"

if s:is_gui
    let g:UltiSnipsExpandTrigger            = "<C-Space>"
else
    let g:UltiSnipsExpandTrigger            = "<Nul>"
endif

" }}}
" TComment {{{

" nnoremap <C-S-j> :TComment<cr>j
" nnoremap <C-S-k> :TComment<cr>k

" }}}
" FSwitch {{{

nnoremap <leader>jj :FSHere<cr>
nnoremap <leader>jr :FSSplitRight<cr>

augroup pl_FSwitch
    autocmd!
    autocmd BufEnter *.cpp let b:fswitchdst  = 'hpp,h'
    autocmd BufEnter *.cpp let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    autocmd BufEnter *.cc  let b:fswitchdst  = 'hh,h'
    autocmd BufEnter *.cc  let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    autocmd BufEnter *.c   let b:fswitchdst  = 'h'
    autocmd BufEnter *.c   let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    autocmd BufEnter *.h   let b:fswitchdst  = 'cpp,cc,c,m'
    autocmd BufEnter *.h   let b:fswitchlocs = 'reg:/include/src/,reg:/Public/Private/,reg:/include.*/src/,../src'
    autocmd BufEnter *.m   let b:fswitchdst  = 'h'
    autocmd BufEnter *.m   let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
augroup END

" }}}
" Autoformat {{{

noremap <leader>ff :Autoformat<cr>

" C
let g:formatdef_astyle_c = '"astyle --mode=c --style=ansi --unpad-paren --pad-oper --pad-first-paren-out --pad-header --add-brackets --convert-tabs --align-pointer=middle --align-reference=name"'
" let g:formatters_c = ['astyle_c']

" C++
let g:formatdef_astyle_cpp = '"astyle --mode=c --style=ansi --unpad-paren --pad-oper --pad-first-paren-out --pad-header --add-brackets --convert-tabs --align-pointer=middle --align-reference=name"'
let g:formatters_cpp = ['astyle_cpp']

" C#
let g:formatdef_astyle_cs = '"astyle --mode=cs --style=ansi --indent-namespaces -pcH".(&expandtab ? "s".&shiftwidth : "t")'
let g:formatters_cs = ['astyle_cs']

" Python
let g:formatdef_autopep8 = '"autopep8 - --max-line-length=80 --indent-size=2 ' .
            \ '--ignore=E111,E121,E125,E126,E127,E128,E129,E131,E133,' .
            \ 'E201,E202,E203,E211,E221,E222,E241,E251,E261,E303,E402,W503"'

" }}}
" NERDTree {{{

let NERDTreeWinSize = 30

nnoremap <leader>nf :NERDTreeFind<cr>
nnoremap <F2> :NERDTreeToggle<cr>

" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber

augroup pl_NERDTree
    autocmd!
    autocmd bufenter * if (winnr("$") == 1
                \ && exists("b:NERDTreeType")
                \ && b:NERDTreeType == "primary") | q | endif
augroup END

" }}}
" Tagbar {{{

let g:tagbar_autofocus = 1
let g:tagbar_width = 30

nnoremap <F3> :TagbarToggle<cr>

" }}}
" Dash {{{

nnoremap <silent> <leader>d :Dash<cr>

" }}}
" Git {{{

nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gl :silent! Glog --reverse \| botright copen \| clast \| redraw!<cr>
nnoremap <leader>ge :Gedit<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gd :Gvdiff<cr>
nnoremap <leader>gp :Gpush<cr>

" }}}
" Instant Markdown {{{

let g:instant_markdown_autostart = 0

" }}}
" Sessions {{{

let g:session_default_overwrite = 0
let g:session_autosave_periodic = 10
let g:session_persist_colors    = 0
let g:session_autoload          = 'no'
let g:session_autosave          = 'yes'
let g:session_default_to_last   = 'yes'
let g:session_directory         = '~/tmp/vim/sessions'

" }}}
" Gruvbox {{{

let g:gruvbox_contrast_dark='medium'
" let g:gruvbox_contrast_light='medium'

"}}}
" Ag {{{

nnoremap <leader>a :Ag!<space>
nnoremap <leader>A :Ag! <C-R><C-W><cr>

" }}}
" }}}
" Auto {{{
" Global {{{

augroup au_global
    autocmd!

    " Save when losing focus, TODO: make it work in iTerm
    autocmd FocusLost * :silent! wall

    " Make sure Vim returns to the same line when you reopen a file.
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \     execute 'normal! g`"zvzz' |
                \ endif

    autocmd InsertEnter * set timeoutlen=200
    autocmd InsertLeave * set timeoutlen=1000
augroup END

" }}}
" Quickfix {{{

augroup ft_quickfix
    autocmd!
    autocmd FileType qf nnoremap <buffer> <Enter> :.cc<cr>
    autocmd FileType qf nnoremap <buffer> q :q<cr>
    autocmd FileType qf nnoremap <buffer> n :cnext<cr>
    autocmd FileType qf nnoremap <buffer> p :cprevious<cr>
augroup END

" }}}
" Markdown {{{

augroup ft_markdown
    autocmd!
    autocmd FileType markdown nnoremap <buffer> <localleader>v :InstantMarkdownPreview<cr>
augroup END

" }}}
" LLVM {{{

set rtp+=~/Development/Projects/llvm/utils/vim

augroup au_llvm
    autocmd!
    autocmd! BufRead,BufNewFile *.ll  set filetype=llvm
    autocmd! BufRead,BufNewFile *.td  set filetype=tablegen
    autocmd! BufRead,BufNewFile *.rst set filetype=rest
augroup END

" }}}
" Python {{{

augroup ft_python
    autocmd!
    autocmd FileType python
                \ setlocal tabstop=2         |
                \ setlocal shiftwidth=2      |
                \ setlocal softtabstop=2     |
                \ setlocal foldmethod=indent |
                \ setlocal foldlevel=0       |
                \ setlocal foldnestmax=2
augroup END

" }}}
" JavaScript {{{

augroup ft_javascript
    autocmd!
    autocmd FileType javascript
                \ setlocal tabstop=2         |
                \ setlocal shiftwidth=2      |
                \ setlocal softtabstop=2     |
                \ setlocal foldmethod=indent |
                \ setlocal foldlevel=0       |
                \ setlocal foldnestmax=2
augroup END

" }}}
" JSON {{{

augroup ft_json
    autocmd!
    autocmd FileType json
                \ setlocal tabstop=2         |
                \ setlocal shiftwidth=2      |
                \ setlocal softtabstop=2     |
                \ setlocal foldmethod=indent |
                \ setlocal foldlevel=2       |
                \ setlocal foldnestmax=10
augroup END

" }}}
" HTML {{{

augroup filetype_html
    autocmd!

    " select current tag block and fold
    autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END

autocmd FileType html
            \ setlocal tabstop=2         |
            \ setlocal shiftwidth=2      |
            \ setlocal softtabstop=2     |
            \ setlocal foldmethod=indent |
            \ setlocal foldlevel=2       |
            \ setlocal foldnestmax=10

" }}}
" Vim {{{

augroup ft_vim
    autocmd!

    autocmd FileType vim setlocal keywordprg=:help
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim nmap <buffer> <leader>d :help <C-r><C-w><cr>

    autocmd FileType help setlocal textwidth=78
    autocmd FileType help nnoremap <silent><buffer> q :q<cr>
    autocmd FileType help nnoremap <tab>j <c-]>

    autocmd BufWritePost *vimrc source $MYVIMRC | AirlineRefresh
    autocmd BufWinEnter *.txt if &filetype == 'help' | wincmd L | endif
augroup END

" }}}
" Helium {{{

augroup ft_helium
    autocmd!
    autocmd BufRead,BufNewFile *.he set filetype=helium
augroup END

" }}}
" ActionScript {{{

augroup ft_as3
    autocmd!
    autocmd BufRead,BufNewFile *.as set filetype=as3
augroup END

" }}}
" C {{{

" TODO make todos settings nicier
augroup ft_c
    autocmd!
    autocmd FileType c setlocal foldmethod=syntax
    autocmd FileType c syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    autocmd FileType c syntax match __test  "TEST.*$"  | highlight __test  guifg=#222222 guibg=#bbbbbb ctermfg=0 ctermbg=241
    autocmd FileType c syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    autocmd FileType c syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    autocmd FileType c syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    autocmd FileType c syntax cluster cCommentGroup contains=__todo,__test,__hmm,__fixme,__shit
augroup END

" }}}
" C++ {{{

augroup ft_cpp
    autocmd!
    autocmd FileType cpp setlocal foldmethod=syntax
    autocmd FileType cpp syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    autocmd FileType cpp syntax match __test  "TEST.*$"  | highlight __test  guifg=#222222 guibg=#bbbbbb ctermfg=0 ctermbg=241
    autocmd FileType cpp syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    autocmd FileType cpp syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    autocmd FileType cpp syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    autocmd FileType c syntax cluster cCommentGroup contains=__todo,__test,__hmm,__fixme,__shit
augroup END

" }}}
" C# {{{

augroup ft_cs
    autocmd!
    autocmd FileType cs setlocal foldmethod=syntax
    autocmd FileType cs syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    autocmd FileType cs syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    autocmd FileType cs syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    autocmd FileType cs syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    autocmd FileType cs syntax cluster csCommentHook contains=__todo,__hmm,__fixme,__shit

    autocmd FileType cs
                \ setlocal tabstop=4         |
                \ setlocal shiftwidth=4      |
                \ setlocal softtabstop=4     |
                \ setlocal foldmethod=indent |
                \ setlocal foldlevel=1       |
                \ setlocal foldnestmax=2
augroup END

" }}}
" Java {{{

augroup ft_java
    autocmd!
    autocmd FileType java
                \ setlocal tabstop=4         |
                \ setlocal shiftwidth=4      |
                \ setlocal softtabstop=4     |
                \ setlocal foldmethod=syntax |
                \ setlocal foldlevel=1       |
                \ setlocal foldnestmax=2
augroup END

" }}}
" Log {{{

augroup ft_log
    autocmd!
    autocmd BufNewFile,BufReadPost *.log :set filetype=messages
augroup END

" }}}
" }}}
" Other {{{
" Cursor {{{

highlight lCursor gui=Bold guifg=NONE guibg=Cyan
highlight iCursor gui=Bold guifg=NONE guibg=LightBlue

" }}}
" Keymap {{{

set keymap=russian-jcukenwin

set iminsert=0
set imsearch=0

" }}}
" }}}
