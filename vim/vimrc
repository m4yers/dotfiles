" Prologue {{{

set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'FSwitch'
Plugin 'VundleVim/Vundle.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'kshenoy/vim-signature'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'marijnh/tern_for_vim'
Plugin 'rust-lang/rust.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'Chiel92/vim-autoformat'
Plugin 'Valloric/Vim-Jinja2-Syntax'
Plugin 'justinmk/vim-syntax-extra'
Plugin 'solarnz/thrift.vim'
Plugin 'PProvost/vim-ps1'
Plugin 'wannesm/wmgraphviz.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'bling/vim-airline'
Plugin 'Raimondi/delimitMate'
Plugin 'morhetz/gruvbox'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'majutsushi/tagbar'
Plugin 'suan/vim-instant-markdown'
Plugin 'tomtom/tcomment_vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
Plugin 'rking/ag.vim'
Plugin 'rizzatti/dash.vim'

call vundle#end()
filetype plugin indent on

set rtp+=~/Development/Projects/dotfiles/vim/after
set spellfile=~/Development/Projects/dotfiles/vim/spell/en.latin1.add

" }}}
" Settings {{{
" Basic {{{

set encoding=utf-8
set backspace=indent,eol,start
set completeopt=longest,menuone
set clipboard=unnamed
set ambiwidth=single
set laststatus=2
set noshowmode
set ttimeoutlen=50
set wildmenu
set history=1000
set lazyredraw
set autowrite
set autoread
set splitbelow
set splitright

" }}}
" SnSnS {{{
" Scroll n Search n Substitute

set scrolloff=0
set sidescroll=1
set sidescrolloff=5

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

" }}}
" Special chars {{{

set list
set listchars=tab:▸\ ,extends:❯,precedes:❮
" set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set showbreak=↪
if has("gui_running")
    set fillchars=diff:⣿,vert:│,fold:\ 
else
    set fillchars=diff:⣿,vert:\|,fold:\ 
endif

" }}}
" Folding {{{

set foldlevelstart=99
set foldminlines=1

" }}}
" Backup {{{

"set nobackup
"set nowritebackup
"set noswapfile

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}
" Indentation {{{

set wrap
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" }}}
" View {{{

syntax on
set ruler
set nonumber
set showcmd
set cursorline
set t_Co=256
set colorcolumn=99
set background=dark
colorscheme gruvbox

if has("gui_running")
    " https://github.com/abertsch/Menlo-for-Powerline
    set guifont=Menlo\ For\ Powerline:h12
    set guioptions=gtm
    set visualbell t_vb="
endif

" }}}
" Wildmenu {{{

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmenu
set wildmode=longest,list,full

" }}}
" Auto {{{

augroup default_group
    au!

    " Save when losing focus, TODO: make it work in iTerm
    au FocusLost * :silent! wall

    " Make sure Vim returns to the same line when you reopen a file.
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}
" }}}
" Mappings {{{

" Leader
let mapleader = ","
let maplocalleader = "\\"

" Make Esc turn off search highlight
if has("gui_running")
    nnoremap <ESC> <ESC> \| :nohlsearch<cr>
endif

" Hate hitting Esc
inoremap kk <ESC>
inoremap jk <ESC>
cnoremap kk <C-c>

" Toggles
" Mnemonic: t - toggle, turn on/off
nnoremap <leader>tn :setlocal number!<cr>
nnoremap <leader>ti :setlocal list!<cr>
nnoremap <Leader>th :setlocal hlsearch!<cr>

" Uppercasing
inoremap <C-f>u <esc>gUiwea

" Movement
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Jumps
nmap J 5j
nmap K 5k
xmap J 5j
xmap K 5k

" Changes
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap gI '.

" Tabs
map <Tab>t :tabnew<CR>
map <Tab>l :tabnext<CR>
map <Tab>h :tabprevious<CR>
map <Tab>1 :tabnext1<CR>
map <Tab>2 :tabnext2<CR>
map <Tab>3 :tabnext3<CR>
map <Tab>4 :tabnext4<CR>
map <Tab>5 :tabnext5<CR>
map <Tab>6 :tabnext6<CR>
map <Tab>7 :tabnext7<CR>
map <Tab>8 :tabnext8<CR>
map <Tab>9 :tabnext9<CR>
map <Tab>0 :tabnext10<CR>

" Splits
nmap <Tab>e :vsplit<CR>
nmap <Tab>o :split<CR>
nmap <Tab>d :bdelete<CR>

" Buffers and Windows
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" resizing
if has("gui_macvim")
    " i've already facepalmed on it, so do not bother ¯\_(ツ)_/¯
    nnoremap ∆ <C-w>-
    nnoremap ˚ <C-w>+
    nnoremap ˙ <C-w><
    nnoremap ¬ <C-w>>
elseif has("unix")
    nnoremap j <C-w>-
    nnoremap k <C-w>+
    nnoremap h <C-w><
    nnoremap l <C-w>>
else
    nnoremap <M-j> <C-w>-
    nnoremap <M-k> <C-w>+
    nnoremap <M-h> <C-w><
    nnoremap <M-l> <C-w>>
endif

" nmap <Tab>j <C-]>
nnoremap <Tab>k <C-o>zz

" Padding
if has("gui_running")
    nmap <Enter> o<Esc>
    nmap <S-Enter> O<Esc>
    if has("gui_macvim")
        nmap <Tab>n :macaction selectNextWindow:<cr>
        nmap <Tab>p :macaction selectPreviousWindow:<cr>
    endif
else
    nmap <Enter> o<Esc>
    nmap ✠ O<Esc>
endif

" Saving
nmap <Leader>w :write<CR>
nmap <Leader>W :wq<CR>

" Replace
nmap <Leader>r :%s/\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>

" Spelling
nnoremap <F4> :setlocal spell! spelllang=en_us<cr>
inoremap <F4> <esc>:setlocal spell! spelllang=en_us<cr>a
noremap <Leader>sn ]s
noremap <Leader>sp [s
noremap <Leader>sa zg
noremap <Leader>su a<C-x>s

" Insert
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A

" Command line
cnoremap <C-a> <home>
cnoremap <C-e> <end>
cnoremap <C-f> <right>
cnoremap <C-b> <left>

""
"" Code formatting
"" file
"nmap <Leader>ff gggqG
"" line
"nmap <Leader>fl gqgq

"
" Buffer
nmap <Leader>br :edit<CR>

" }}}
" Plugins {{{
" Airline {{{

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_powerline_fonts = 1
let g:airline_symbols.linenr = 'LN'
let g:airline_detect_paste = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#whitespace#show_message = 1

" }}}
" Syntastic {{{

let g:syntastic_error_symbol = '✖'
let g:syntastic_warning_symbol = '⚈'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_cpp_include_dirs = ['/usr/local/Cellar/boost/1.57.0/include']

" }}}
" CtrlP {{{

let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
nnoremap <C-o> :CtrlPFunky<Cr>

" }}}
" EasyMotion {{{

nmap <Space> <Plug>(easymotion-s)

" }}}
" UltiSnips {{{

let g:snips_author = "Artyom Goncharov"
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]
let g:UltiSnipsJumpBackwardTrigger = "<c-m>"
let g:UltiSnipsJumpForwardTrigger = "<c-l>"
if has("gui_running")
    let g:UltiSnipsExpandTrigger = "<C-Space>"
else
    let g:UltiSnipsExpandTrigger = "<Nul>"
endif
"let g:UltiSnipsEditSplit="vertical"

" }}}
" YouCompleteMe {{{

let g:ycm_complete_in_comments = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_goto_buffer_command = 'new-tab'
let g:ycm_key_invoke_completion = ''
let g:ycm_filetype_specific_completion_to_disable = {'javascript': 1}
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_autoclose_preview_window_after_insertion = 1

nmap <Leader>yd :YcmDebugInfo<CR>
nmap <Leader>yt :YcmCompleter GetType<CR>
nmap <Tab>j :YcmCompleter GoTo<CR>zz

" }}}
" TComment {{{

" nnoremap <C-S-j> :TComment<cr>j
" nnoremap <C-S-k> :TComment<cr>k

" }}}
" FSwitch {{{
nnoremap <Leader>jj :FSHere<cr>
nnoremap <Leader>jr :FSSplitRight<cr>
augroup vimrc
    au!
    au BufEnter *.cpp let b:fswitchdst  = 'hpp,h'
    au BufEnter *.cpp let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    au BufEnter *.cc  let b:fswitchdst  = 'hh,h'
    au BufEnter *.cc  let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    au BufEnter *.c   let b:fswitchdst  = 'h'
    au BufEnter *.c   let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    au BufEnter *.h   let b:fswitchdst  = 'cpp,cc,c,m'
    au BufEnter *.h   let b:fswitchlocs = 'reg:/include/src/,reg:/Public/Private/,reg:/include.*/src/,../src'
    au BufEnter *.m   let b:fswitchdst  = 'h'
    au BufEnter *.m   let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
" augroup END

" }}}
" Autoformat {{{

noremap <leader>ff :Autoformat<CR>

" C
let g:formatdef_astyle_c = '"astyle --mode=c --style=ansi --unpad-paren --pad-oper --pad-first-paren-out --pad-header --add-brackets --convert-tabs --align-pointer=middle --align-reference=name"'
" let g:formatters_c = ['astyle_c']

" C++
let g:formatdef_astyle_cpp = '"astyle --mode=c --style=ansi --unpad-paren --pad-oper --pad-first-paren-out --pad-header --add-brackets --convert-tabs --align-pointer=middle --align-reference=name"'
let g:formatters_cpp = ['astyle_cpp']

" C#
let g:formatdef_astyle_cs = '"astyle --mode=cs --style=ansi --indent-namespaces -pcH".(&expandtab ? "s".&shiftwidth : "t")'
let g:formatters_cs = ['astyle_cs']

" }}}
" NERDTree {{{

map <F2> :NERDTreeToggle<CR><C-w>=
let NERDTreeWinSize = 30
autocmd bufenter * if (winnr("$") == 1
    \ && exists("b:NERDTreeType")
    \ && b:NERDTreeType == "primary") | q | endif

" }}}
" Tagbar {{{

let g:tagbar_autofocus = 1
let g:tagbar_width = 30

map <F3> :TagbarToggle<CR><C-w>=

" }}}
" Dash {{{

nmap <silent> <Leader>d :Dash<CR>

" }}}
" Git {{{

nmap <Leader>gs :Gstatus<CR>
nmap <Leader>gc :Gcommit<CR>
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gd :Gvdiff<CR>

" }}}
" Instant Markdown {{{

let g:instant_markdown_autostart = 0

" }}}
" Sessions {{{

let g:session_default_overwrite = 0
let g:session_autosave_periodic = 10
let g:session_persist_colors    = 0
let g:session_autoload          = 'no'
let g:session_autosave          = 'yes'
let g:session_default_to_last   = 'yes'
let g:session_directory         = '~/tmp/vim/sessions'

" }}}
" Gruvbox {{{

let g:gruvbox_contrast_dark='medium'
let g:gruvbox_contrast_light='medium'

"}}}
" Ag {{{

map <leader>a :Ag!<space>
map <leader>A :Ag! <C-R><C-W><CR>

" }}}
" }}}
" Auto {{{
" Global {{{

augroup ft_all
    au!
    au InsertEnter * set timeoutlen=200
    au InsertLeave * set timeoutlen=1000
augroup END

" "}}}
" Vim {{{

augroup ft_vim
    au!
    au FileType vim setlocal keywordprg=:help
    au FileType vim nmap <buffer> <leader>d :help <C-r><C-w><CR>
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au FileType help nmap <silent><buffer> q :q<cr>
    au BufWritePost .vimrc source $MYVIMRC
    au BufWinEnter *.txt if &ft == 'help' | wincmd H | endif
augroup END

" }}} Vim "
" Helium {{{

augroup ft_helium
    au!
    au BufRead,BufNewFile *.he set filetype=helium
augroup END

" }}}
" ActionScript {{{

augroup ft_as3
    au!
    au BufRead,BufNewFile *.as set filetype=as3
augroup END

" }}}
" JavaScript {{{

augroup ft_js
    au!
    au FileType javascript nmap <buffer> <Leader>yt :TernType<cr>
    au FileType javascript nmap <buffer> <Tab>j :TernDef<cr>
augroup END

" }}}
" C {{{

" TODO make todos settings nicier
augroup ft_c
    au!
    au FileType c setlocal foldmethod=syntax
    au FileType c syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    au FileType c syntax match __test  "TEST.*$"  | highlight __test  guifg=#222222 guibg=#bbbbbb ctermfg=0 ctermbg=241
    au FileType c syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    au FileType c syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    au FileType c syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    au FileType c syntax cluster cCommentGroup contains=__todo,__test,__hmm,__fixme,__shit
augroup END

" "}}}
" C++ {{{

augroup ft_cpp
    au!
    au FileType cpp setlocal foldmethod=syntax
    au FileType cpp syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    au FileType cpp syntax match __test  "TEST.*$"  | highlight __test  guifg=#222222 guibg=#bbbbbb ctermfg=0 ctermbg=241
    au FileType cpp syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    au FileType cpp syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    au FileType cpp syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    au FileType c syntax cluster cCommentGroup contains=__todo,__test,__hmm,__fixme,__shit
augroup END

" "}}}
" C# {{{

augroup ft_cs
    au!
    au FileType cs setlocal foldmethod=syntax
    au FileType cs syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    au FileType cs syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    au FileType cs syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    au FileType cs syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    au FileType cs syntax cluster csCommentHook contains=__todo,__hmm,__fixme,__shit
augroup END

" "}}}
" Java {{{

augroup ft_java
    au!
    au FileType java setlocal foldmethod=syntax
augroup END

" "}}}
" "}}}
