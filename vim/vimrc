" Prologue {{{

set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'FSwitch'
Plugin 'VundleVim/Vundle.vim'
" Plugin 'ryanoasis/vim-devicons'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'kshenoy/vim-signature'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'marijnh/tern_for_vim'
Plugin 'rust-lang/rust.vim'
Plugin 'Xe/lolcode.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'Chiel92/vim-autoformat'
Plugin 'Valloric/Vim-Jinja2-Syntax'
Plugin 'tfnico/vim-gradle'
Plugin 'justinmk/vim-syntax-extra'
Plugin 'solarnz/thrift.vim'
Plugin 'PProvost/vim-ps1'
Plugin 'wannesm/wmgraphviz.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'bling/vim-airline'
Plugin 'Raimondi/delimitMate'
Plugin 'morhetz/gruvbox'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'majutsushi/tagbar'
Plugin 'suan/vim-instant-markdown'
Plugin 'tomtom/tcomment_vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
Plugin 'rking/ag.vim'
Plugin 'rizzatti/dash.vim'

call vundle#end()
filetype plugin indent on

set rtp+=~/Development/Projects/dotfiles/vim/after
set spellfile=~/Development/Projects/dotfiles/vim/spell/en.latin1.add

" }}}
" Settings {{{
" Basic {{{

set encoding=utf-8
set backspace=indent,eol,start
set completeopt=longest,menuone
set clipboard=unnamed
set ambiwidth=single
set laststatus=2
set noshowmode
set ttimeoutlen=50
set wildmenu
set history=1000
set lazyredraw
set autowrite
set autoread
set splitbelow
set splitright

" }}}
" Scroll n Search n Substitute {{{

set scrolloff=0
set sidescroll=1
set sidescrolloff=5

set noignorecase
set smartcase
set incsearch
set hlsearch

" Show matching pairs
set showmatch
set matchtime=5

" }}}
" Special chars {{{

set list
set listchars=tab:‚ñ∏\ ,extends:‚ùØ,precedes:‚ùÆ
" set listchars=tab:‚ñ∏\ ,eol:¬¨,extends:‚ùØ,precedes:‚ùÆ
set showbreak=‚Ü™
if has("gui_running")
    set fillchars=diff:‚£ø,vert:‚îÇ,fold:\ 
else
    set fillchars=diff:‚£ø,vert:\|,fold:\ 
endif

" }}}
" Folding {{{

set foldlevelstart=99
set foldminlines=1

" }}}
" Backup {{{

"set nobackup
"set nowritebackup
"set noswapfile

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}
" Indentation {{{

set wrap
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" }}}
" View {{{

syntax on
set ruler
set nonumber
set showcmd
set cursorline
set t_Co=256
set colorcolumn=99
set background=dark
colorscheme gruvbox

if has("gui_running")
    " https://github.com/abertsch/Menlo-for-Powerline
    set guifont=Menlo\ For\ Powerline:h12
    set guioptions=gtm
    set visualbell t_vb="
endif

" }}}
" Wildmenu {{{

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmenu
set wildmode=longest,list,full

" }}}
" }}}
" Mappings {{{

" leader
let mapleader = ","
let maplocalleader = "\\"

" Make Esc turn off search highlight
if has("gui_running")
    nnoremap <esc> <esc> \| :nohlsearch<cr>
endif

" Hate hitting Esc
inoremap kk <esc>
inoremap jk <esc>
cnoremap kk <C-c>

" Toggles
" Mnemonic: t - toggle, turn on/off
nnoremap <leader>tn :setlocal number!<cr>
nnoremap <leader>ti :setlocal list!<cr>
nnoremap <leader>th :setlocal hlsearch!<cr>

" Uppercasing
inoremap <C-f>u <esc>gUiwea
inoremap <C-f>l <esc>guiwea
nnoremap <C-f>u gUiw
nnoremap <C-f>l guiw

" Movement
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Jumps
nnoremap J 5j
nnoremap K 5k
xnoremap J 5j
xnoremap K 5k

" jump back
nnoremap gp <c-o>zz
" jump forward
nnoremap gn <c-i>zz

" goto older position in change list
nnoremap g; g;zz
" goto newer position in change list
nnoremap g, g,zz

" last position of the last change
nnoremap gI '.

" Tabs
nnoremap <tab>t :tabnew<cr>
nnoremap <tab>l :tabnext<cr>
nnoremap <tab>h :tabprevious<cr>
nnoremap <tab>1 :tabnext1<cr>
nnoremap <tab>2 :tabnext2<cr>
nnoremap <tab>3 :tabnext3<cr>
nnoremap <tab>4 :tabnext4<cr>
nnoremap <tab>5 :tabnext5<cr>
nnoremap <tab>6 :tabnext6<cr>
nnoremap <tab>7 :tabnext7<cr>
nnoremap <tab>8 :tabnext8<cr>
nnoremap <tab>9 :tabnext9<cr>
nnoremap <tab>0 :tabnext10<cr>

" Splits
nnoremap <tab>e :vsplit<cr>
nnoremap <tab>o :split<cr>
nnoremap <tab>d :bdelete<cr>

" Buffers and Windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" resizing
if has("gui_macvim")
    " i've already facepalmed on it, so do not bother ¬Ø\_(„ÉÑ)_/¬Ø
    nnoremap ‚àÜ <C-w>-
    nnoremap Àö <C-w>+
    nnoremap Àô <C-w><
    nnoremap ¬¨ <C-w>>
elseif has("unix")
    nnoremap j <C-w>-
    nnoremap k <C-w>+
    nnoremap h <C-w><
    nnoremap l <C-w>>
else
    nnoremap <M-j> <C-w>-
    nnoremap <M-k> <C-w>+
    nnoremap <M-h> <C-w><
    nnoremap <M-l> <C-w>>
endif

" nnoremap <tab>j <C-]>
nnoremap <tab>k <C-o>zz

" Padding
if has("gui_running")
    nnoremap <Enter> o<Esc>
    nnoremap <S-Enter> O<Esc>
    if has("gui_macvim")
        nnoremap <tab>n :macaction selectNextWindow:<cr>
        nnoremap <tab>p :macaction selectPreviousWindow:<cr>
    endif
else
    nnoremap <Enter> o<Esc>
    nnoremap ‚ú† O<Esc>
endif

" Saving
nnoremap <leader>w :write<cr>
nnoremap <leader>W :wq<cr>

" Replace
nnoremap <leader>r :%s/\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>

" Spelling
nnoremap <F4> :setlocal spell! spelllang=en_us<cr>
inoremap <F4> <esc>:setlocal spell! spelllang=en_us<cr>a
nnoremap <leader>sn ]s
nnoremap <leader>sp [s
nnoremap <leader>sa zg
nnoremap <leader>su a<C-x>s

" Insert
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A

" Command line
cnoremap <C-a> <home>
cnoremap <C-e> <end>
cnoremap <C-f> <right>
cnoremap <C-b> <left>

" }}}
" Abbreviations {{{

iabbrev @@ m4yers@gmail.com

" }}}
" Plugins {{{
" Airline {{{

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'iminsert'])
endfunction

augroup pl_Airline
    autocmd!
    autocmd User AirlineAfterInit call AirlineInit()
augroup END

let g:airline_detect_iminsert = 1
let g:airline_detect_paste = 0
let g:airline_powerline_fonts = 1
let g:airline_symbols.linenr = 'LN'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#whitespace#show_message = 1

" }}}
" Syntastic {{{

let g:syntastic_error_symbol = '‚úñ'
let g:syntastic_warning_symbol = '‚öà'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_cpp_include_dirs = ['/usr/local/Cellar/boost/1.57.0/include']

" }}}
" CtrlP {{{

let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
nnoremap <C-o> :CtrlPFunky<Cr>

" }}}
" EasyMotion {{{

nnoremap <space> <plug>(easymotion-s)

" }}}
" UltiSnips {{{

let g:snips_author = "Artyom Goncharov"
let g:UltiSnipsSnippetDirectories = ["UltiSnips"]
let g:UltiSnipsJumpBackwardTrigger = "<c-m>"
let g:UltiSnipsJumpForwardTrigger = "<c-l>"
if has("gui_running")
    let g:UltiSnipsExpandTrigger = "<C-Space>"
else
    let g:UltiSnipsExpandTrigger = "<Nul>"
endif
"let g:UltiSnipsEditSplit="vertical"

" }}}
" YouCompleteMe {{{

let g:ycm_error_symbol = '‚úñ'
let g:ycm_warning_symbol = '‚öà'
let g:ycm_complete_in_comments = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_goto_buffer_command = 'new-tab'
let g:ycm_key_invoke_completion = ''
let g:ycm_filetype_specific_completion_to_disable = {'java': 1}
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_autoclose_preview_window_after_insertion = 1

nmap <leader>yd :YcmDebugInfo<cr>
nmap <leader>yt :YcmCompleter GetType<cr>
nmap <tab>j :YcmCompleter GoTo<cr>zz

" }}}
" TComment {{{

" nnoremap <C-S-j> :TComment<cr>j
" nnoremap <C-S-k> :TComment<cr>k

" }}}
" FSwitch {{{

nnoremap <leader>jj :FSHere<cr>
nnoremap <leader>jr :FSSplitRight<cr>

augroup pl_FSwitch
    autocmd!
    autocmd BufEnter *.cpp let b:fswitchdst  = 'hpp,h'
    autocmd BufEnter *.cpp let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    autocmd BufEnter *.cc  let b:fswitchdst  = 'hh,h'
    autocmd BufEnter *.cc  let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    autocmd BufEnter *.c   let b:fswitchdst  = 'h'
    autocmd BufEnter *.c   let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
    autocmd BufEnter *.h   let b:fswitchdst  = 'cpp,cc,c,m'
    autocmd BufEnter *.h   let b:fswitchlocs = 'reg:/include/src/,reg:/Public/Private/,reg:/include.*/src/,../src'
    autocmd BufEnter *.m   let b:fswitchdst  = 'h'
    autocmd BufEnter *.m   let b:fswitchlocs = 'reg:/src/include/,reg:/Private/Public/,reg:|src|include/**|,../include'
augroup END

" }}}
" Autoformat {{{

noremap <leader>ff :Autoformat<cr>

" C
let g:formatdef_astyle_c = '"astyle --mode=c --style=ansi --unpad-paren --pad-oper --pad-first-paren-out --pad-header --add-brackets --convert-tabs --align-pointer=middle --align-reference=name"'
" let g:formatters_c = ['astyle_c']

" C++
let g:formatdef_astyle_cpp = '"astyle --mode=c --style=ansi --unpad-paren --pad-oper --pad-first-paren-out --pad-header --add-brackets --convert-tabs --align-pointer=middle --align-reference=name"'
let g:formatters_cpp = ['astyle_cpp']

" C#
let g:formatdef_astyle_cs = '"astyle --mode=cs --style=ansi --indent-namespaces -pcH".(&expandtab ? "s".&shiftwidth : "t")'
let g:formatters_cs = ['astyle_cs']

" }}}
" NERDTree {{{

let NERDTreeWinSize = 30

nnoremap <leader>nf :NERDTreeFind<cr>
nnoremap <F2> :NERDTreeToggle<cr><C-w>=

augroup pl_NERDTree
    autocmd!
    autocmd bufenter * if (winnr("$") == 1
        \ && exists("b:NERDTreeType")
        \ && b:NERDTreeType == "primary") | q | endif
augroup END

" }}}
" Tagbar {{{

let g:tagbar_autofocus = 1
let g:tagbar_width = 30

nnoremap <F3> :TagbarToggle<cr><C-w>=

" }}}
" Dash {{{

nnoremap <silent> <leader>d :Dash<cr>

" }}}
" Git {{{

nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gd :Gvdiff<cr>

" }}}
" Instant Markdown {{{

let g:instant_markdown_autostart = 0

" }}}
" Sessions {{{

let g:session_default_overwrite = 0
let g:session_autosave_periodic = 10
let g:session_persist_colors    = 0
let g:session_autoload          = 'no'
let g:session_autosave          = 'yes'
let g:session_default_to_last   = 'yes'
let g:session_directory         = '~/tmp/vim/sessions'

" }}}
" Gruvbox {{{

let g:gruvbox_contrast_dark='medium'
let g:gruvbox_contrast_light='medium'

"}}}
" Ag {{{

nnoremap <leader>a :Ag!<space>
nnoremap <leader>A :Ag! <C-R><C-W><cr>

" }}}
" }}}
" Auto {{{
" Default {{{

augroup au_Default
    autocmd!

    " Save when losing focus, TODO: make it work in iTerm
    autocmd FocusLost * :silent! wall

    " Make sure Vim returns to the same line when you reopen a file.
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}
" Global {{{

augroup ft_all
    autocmd!
    autocmd InsertEnter * set timeoutlen=200
    autocmd InsertLeave * set timeoutlen=1000
augroup END

" }}}
" Markdown {{{

augroup ft_markdown
    autocmd!
    autocmd FileType markdown nnoremap <buffer> <localleader>v :InstantMarkdownPreview<cr>
augroup END

" }}}
" HTML {{{

augroup filetype_html
    autocmd!

    " select current tag block and fold
    autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END

" }}}
" Vim {{{

augroup ft_vim
    autocmd!

    autocmd FileType vim setlocal keywordprg=:help
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim nmap <buffer> <leader>d :help <C-r><C-w><cr>

    autocmd FileType help setlocal textwidth=78
    autocmd FileType help nmap <silent><buffer> q :q<cr>

    autocmd BufWritePost *vimrc source $MYVIMRC | AirlineRefresh
    autocmd BufWinEnter *.txt if &filetype == 'help' | wincmd L | endif
augroup END

" }}}
" Helium {{{

augroup ft_helium
    autocmd!
    autocmd BufRead,BufNewFile *.he set filetype=helium
augroup END

" }}}
" ActionScript {{{

augroup ft_as3
    autocmd!
    autocmd BufRead,BufNewFile *.as set filetype=as3
augroup END

" }}}
" JavaScript {{{

augroup ft_js
    autocmd!
    autocmd FileType javascript nmap <buffer> <leader>yt :TernType<cr>
    autocmd FileType javascript nmap <buffer> <tab>j :TernDef<cr>
augroup END

" }}}
" C {{{

" TODO make todos settings nicier
augroup ft_c
    autocmd!
    autocmd FileType c setlocal foldmethod=syntax
    autocmd FileType c syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    autocmd FileType c syntax match __test  "TEST.*$"  | highlight __test  guifg=#222222 guibg=#bbbbbb ctermfg=0 ctermbg=241
    autocmd FileType c syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    autocmd FileType c syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    autocmd FileType c syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    autocmd FileType c syntax cluster cCommentGroup contains=__todo,__test,__hmm,__fixme,__shit
augroup END

" }}}
" C++ {{{

augroup ft_cpp
    autocmd!
    autocmd FileType cpp setlocal foldmethod=syntax
    autocmd FileType cpp syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    autocmd FileType cpp syntax match __test  "TEST.*$"  | highlight __test  guifg=#222222 guibg=#bbbbbb ctermfg=0 ctermbg=241
    autocmd FileType cpp syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    autocmd FileType cpp syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    autocmd FileType cpp syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    autocmd FileType c syntax cluster cCommentGroup contains=__todo,__test,__hmm,__fixme,__shit
augroup END

" }}}
" C# {{{

augroup ft_cs
    autocmd!
    autocmd FileType cs setlocal foldmethod=syntax
    autocmd FileType cs syntax match __todo  "TODO.*$"  | highlight __todo  guifg=#222222 guibg=#00875f ctermfg=0 ctermbg=29
    autocmd FileType cs syntax match __hmm   "HMM.*$"   | highlight __hmm   guifg=#222222 guibg=#d3869b ctermfg=0 ctermbg=175
    autocmd FileType cs syntax match __fixme "FIXME.*$" | highlight __fixme guifg=#222222 guibg=#df5f00 ctermfg=0 ctermbg=166
    autocmd FileType cs syntax match __shit  "SHIT.*$"  | highlight __shit  guifg=#222222 guibg=#af0000 ctermfg=0 ctermbg=124
    autocmd FileType cs syntax cluster csCommentHook contains=__todo,__hmm,__fixme,__shit
augroup END

" }}}
" Java {{{

augroup ft_java
    autocmd!
    autocmd FileType java setlocal foldmethod=syntax
augroup END

" }}}
" }}}
" Other {{{
" Cursor {{{

highlight lCursor gui=Bold guifg=NONE guibg=Cyan
highlight iCursor gui=Bold guifg=NONE guibg=LightBlue

" }}}
" Keymap {{{

set keymap=russian-jcukenwin

set iminsert=0
set imsearch=0

" }}}
" }}}
